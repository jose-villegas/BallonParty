//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AnyBalloonsPowerUpCheckEventListenerComponent anyBalloonsPowerUpCheckEventListener { get { return (AnyBalloonsPowerUpCheckEventListenerComponent)GetComponent(GameComponentsLookup.AnyBalloonsPowerUpCheckEventListener); } }
    public bool hasAnyBalloonsPowerUpCheckEventListener { get { return HasComponent(GameComponentsLookup.AnyBalloonsPowerUpCheckEventListener); } }

    public void AddAnyBalloonsPowerUpCheckEventListener(System.Collections.Generic.List<IAnyBalloonsPowerUpCheckEventListener> newValue) {
        var index = GameComponentsLookup.AnyBalloonsPowerUpCheckEventListener;
        var component = (AnyBalloonsPowerUpCheckEventListenerComponent)CreateComponent(index, typeof(AnyBalloonsPowerUpCheckEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAnyBalloonsPowerUpCheckEventListener(System.Collections.Generic.List<IAnyBalloonsPowerUpCheckEventListener> newValue) {
        var index = GameComponentsLookup.AnyBalloonsPowerUpCheckEventListener;
        var component = (AnyBalloonsPowerUpCheckEventListenerComponent)CreateComponent(index, typeof(AnyBalloonsPowerUpCheckEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveAnyBalloonsPowerUpCheckEventListener() {
        RemoveComponent(GameComponentsLookup.AnyBalloonsPowerUpCheckEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnyBalloonsPowerUpCheckEventListener;

    public static Entitas.IMatcher<GameEntity> AnyBalloonsPowerUpCheckEventListener {
        get {
            if (_matcherAnyBalloonsPowerUpCheckEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnyBalloonsPowerUpCheckEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnyBalloonsPowerUpCheckEventListener = matcher;
            }

            return _matcherAnyBalloonsPowerUpCheckEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddAnyBalloonsPowerUpCheckEventListener(IAnyBalloonsPowerUpCheckEventListener value) {
        var listeners = hasAnyBalloonsPowerUpCheckEventListener
            ? anyBalloonsPowerUpCheckEventListener.value
            : new System.Collections.Generic.List<IAnyBalloonsPowerUpCheckEventListener>();
        listeners.Add(value);
        ReplaceAnyBalloonsPowerUpCheckEventListener(listeners);
    }

    public void RemoveAnyBalloonsPowerUpCheckEventListener(IAnyBalloonsPowerUpCheckEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = anyBalloonsPowerUpCheckEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnyBalloonsPowerUpCheckEventListener();
        } else {
            ReplaceAnyBalloonsPowerUpCheckEventListener(listeners);
        }
    }
}
